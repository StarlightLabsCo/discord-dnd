generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider         = "zod-prisma-types"
    createInputTypes = false
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id // https://discord.com/developers/docs/reference#snowflakes

    username          String  @unique
    discriminator     String
    global_name       String?
    avatar            String?
    avatar_decoration String?

    locale String?

    campaigns  CampaignInstance[] // campaigns instances that the user is a part of
    characters CharacterInstance[] // character instances that the user has created

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Dice {
    D4
    D6
    D8
    D10
    D12
    D20
}

// ---- Models that we create as game developers (via admin panel or script) ----
// Any model that doesn't have Instance in the name is either a template to be used to create instances
// or a permanent model that doesn't have instances (and is used as a reference in other models)

// - World - (Static)
// World is the top level model that contains all the other models
// It is not meant to be altered by the players but by the game developers
model World {
    id String @id @default(cuid())

    name        String
    description String
    imageUrl    String

    races       Race[]
    classes     Class[]
    backgrounds Background[]
    feats       Feat[]
    languages   Language[]
    locations   Location[]
    items       Item[]
    spells      Spell[]

    campaigns Campaign[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// - Campaign - (Instance Template)
// Campaign is a model that contains all the information about a campaign
// The beats, the characters, events, etc. are all part of the campaign 
// This model is used to create instances of campaigns (which are the actual campaigns that players play in)
model Campaign {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    characters Character[] // character templates for the story

    acts Act[]
    // TODO: add beats, events, etc

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // instances using this model
    campaignInstances CampaignInstance[]
}

model Act {
    id String @id @default(cuid())

    campaignId String
    campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    // TODO
    adventures Adventure[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Adventure {
    id String @id @default(cuid())

    actId String
    act   Act    @relation(fields: [actId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    // TODO
    beats Beat[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum BeatType {
    ENCOUNTER
    ROLEPLAY
    LOOT
    QUEST
    SHOP
    REST
}

model Beat {
    id String @id @default(cuid())

    adventureId String
    adventure   Adventure @relation(fields: [adventureId], references: [id], onDelete: Cascade)

    type BeatType

    locationId String
    location   Location @relation(fields: [locationId], references: [id], onDelete: Restrict)

    nextBeats Beat[] @relation("BeatConnection")
    pastBeats Beat[] @relation("BeatConnection")

    name        String
    description String
    imageUrl    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // instances using this model
    storyBeatInstances StoryBeatInstance[]
}

// - Location - (Static)
model Location {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    parentLocationId String?    @map("parentId")
    parentLocation   Location?  @relation("ParentLocation", fields: [parentLocationId], references: [id], onDelete: Cascade)
    subLocations     Location[] @relation("ParentLocation")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // models referencing this location
    characters         Character[]
    characterInstances CharacterInstance[]
    beats              Beat[]
}

// - Race - (Static)
model Race {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    strengthModifier     Int @default(0)
    dexterityModifier    Int @default(0)
    constitutionModifier Int @default(0)
    intelligenceModifier Int @default(0)
    wisdomModifier       Int @default(0)
    charismaModifier     Int @default(0)

    size  CharacterSize @default(MEDIUM)
    speed Int           @default(25)

    languages Language[]

    racialTraits RacialTrait[]
    subraces     Subrace[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // instances using this model
    characters         Character[]
    characterInstances CharacterInstance[]
}

// - Subrace - (Static)
model Subrace {
    id String @id @default(cuid())

    parentRaceId String
    parentRace   Race   @relation(fields: [parentRaceId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    strengthModifier     Int @default(0)
    dexterityModifier    Int @default(0)
    constitutionModifier Int @default(0)
    intelligenceModifier Int @default(0)
    wisdomModifier       Int @default(0)
    charismaModifier     Int @default(0)

    size  CharacterSize @default(MEDIUM)
    speed Int           @default(25)

    racialTraits RacialTrait[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // instances using this model
    characters         Character[]
    characterInstances CharacterInstance[]
}

// - Racial Trait - (Static)
model RacialTrait {
    id String @id @default(cuid())

    raceId String?
    race   Race?   @relation(fields: [raceId], references: [id], onDelete: Cascade)

    subraceId String?
    subrace   Subrace? @relation(fields: [subraceId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    proficiencies Proficiency[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// - Language - (Static)
model Language {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    // TODO

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // models referencing this language
    races Race[]
}

// - Class - (Static)
model Class {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    classFeatures ClassFeature[]

    proficiencies     Proficiency[]
    startingEquipment Item[]

    hitDice Dice @default(D6)

    mainAbility String @default("strength") // the main ability score for the class (used for attack rolls, etc.)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // instances using this model
    characters         Character[]
    characterInstances CharacterInstance[]
}

// - Class Feature - (Static)
model ClassFeature {
    id String @id @default(cuid())

    classId String
    class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    startingLevel Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// - Background - (Static)
model Background {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    proficiencies     Proficiency[] // proficiencies that the background gives
    startingEquipment Item[] // equipment that the background gives

    personalityTraits String[] // personality traits to pick from (2)
    ideals            String[] // ideals to pick from (1)
    bonds             String[] // bonds to pick from (1)
    flaws             String[] // flaws to pick from (1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // instances using this model
    characters         Character[]
    characterInstances CharacterInstance[]
}

// - Proficiency - (Static)
// Proficiencies modify the character's stats during dice rolls
// They can be weapon proficiencies, armor proficiencies, tool proficiencies, or skill proficiencies
// If the player has a proficiency in a certain area, they get a bonus to their roll (their proficiency bonus)
// alongside their existing ability score modifier
enum ProficiencyType {
    WEAPON
    ARMOR
    TOOL
    SKILL
}

model Proficiency {
    id String @id @default(cuid())

    type ProficiencyType

    name        String
    description String
    imageUrl    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // models referencing this proficiency
    classes            Class[]
    backgrounds        Background[]
    characters         Character[]
    characterInstances CharacterInstance[]
    racialTraits       RacialTrait[]
}

// - Feat - (Static)
// Feats are special abilities that characters can have that are not tied to their class
// Players can choose to take a feat instead of an ability score improvement (ASI), which
// usually happens every 4 levels
model Feat {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    prerequisites String

    name        String
    description String
    imageUrl    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // instances using this model
    characters         Character[]
    characterInstances CharacterInstance[]
}

// - Character - (Instance Template)
// Character is a model that contains all the information about a character
// It is used to create instances of characters (which are the actual characters that players have)
// This is mainly for premade characters that players can choose from or for NPCs
enum CharacterSize {
    SMALL
    MEDIUM
}

enum CharacterAlignment {
    LAWFUL_GOOD
    NEUTRAL_GOOD
    CHAOTIC_GOOD
    LAWFUL_NEUTRAL
    TRUE_NEUTRAL
    CHAOTIC_NEUTRAL
    LAWFUL_EVIL
    NEUTRAL_EVIL
    CHAOTIC_EVIL
}

model Character {
    id String @id @default(cuid())

    campaignId String
    campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

    raceId String
    race   Race   @relation(fields: [raceId], references: [id], onDelete: Cascade)

    subraceId String?
    subrace   Subrace? @relation(fields: [subraceId], references: [id], onDelete: SetNull)

    classId String
    class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

    backgroundId String
    background   Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    pronouns          String
    age               Int
    voice             String
    alignment         CharacterAlignment
    appearance        String
    backstory         String
    personalityTraits String[]
    ideals            String[]
    bonds             String[]
    flaws             String[]

    currentLocationId String?
    currentLocation   Location? @relation(fields: [currentLocationId], references: [id], onDelete: SetNull)

    level            Int           @default(1)
    experience       Int           @default(0)
    proficiencyBonus Int           @default(2)
    proficiencies    Proficiency[]

    strength     Int @default(8)
    dexterity    Int @default(8)
    constitution Int @default(8)
    intelligence Int @default(8)
    wisdom       Int @default(8)
    charisma     Int @default(8)

    hitDieCount Int  @default(1)
    hitDieType  Dice @default(D6)

    size CharacterSize @default(MEDIUM)

    speed Int @default(25)

    feats Feat[]

    inventory Item[]

    spells              Spell[]
    maxLevel1SpellSlots Int     @default(0)
    maxLevel2SpellSlots Int     @default(0)
    maxLevel3SpellSlots Int     @default(0)
    maxLevel4SpellSlots Int     @default(0)
    maxLevel5SpellSlots Int     @default(0)
    maxLevel6SpellSlots Int     @default(0)
    maxLevel7SpellSlots Int     @default(0)
    maxLevel8SpellSlots Int     @default(0)
    maxLevel9SpellSlots Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // instances using this model
    characterInstances CharacterInstance[]
}

// - Item - (Static)
enum ItemRarity {
    COMMON
    UNCOMMON
    RARE
    VERY_RARE
    LEGENDARY
}

enum DamageType {
    BLUDGEONING
    PIERCING
    SLASHING
    FIRE
    COLD
    LIGHTNING
    THUNDER
    FORCE
    NECROTIC
    RADIANT
    POISON
    PSYCHIC
    ACID
}

model Item {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    weight Int
    value  Int
    rarity ItemRarity @default(COMMON)

    // if the item is a weapon
    damageDice  Dice?
    damageType  DamageType?
    damageBonus Int?
    properties  String[] // properties of the weapon (finesse, light, heavy, etc.)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // model/instances who have this item
    classes            Class[]
    backgrounds        Background[]
    characters         Character[]
    characterInstances CharacterInstance[]
}

// - Spell - (Static)
enum SpellSchool {
    ABJURATION
    CONJURATION
    DIVINATION
    ENCHANTMENT
    EVOCATION
    ILLUSION
    NECROMANCY
    TRANSMUTATION
}

model Spell {
    id String @id @default(cuid())

    worldId String
    world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    level       Int         @default(0) // 0 means cantrip, 1-9 are spell levels
    school      SpellSchool
    castingTime String

    range      Int
    components String[]
    duration   String

    ritual Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // models referencing this spell
    characters         Character[]
    characterInstances CharacterInstance[]
}

// ---- Things the player will create ---- 
// These are the instances of the models above, which will be instantiated by the players and modified during their playthrough
model CampaignInstance {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id])

    name        String
    description String
    imageUrl    String

    campaignId String
    campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Restrict)

    characterInstances CharacterInstance[] // player characters that are part of the campaign
    storyBeatInstances StoryBeatInstance[] // chronological order of story beat instances

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StoryBeatInstance {
    id String @id @default(cuid())

    beatId String
    beat   Beat   @relation(fields: [beatId], references: [id], onDelete: Restrict)

    campaignInstanceId String
    campaignInstance   CampaignInstance @relation(fields: [campaignInstanceId], references: [id], onDelete: Cascade)

    name        String
    description String
    imageUrl    String

    characterInstances CharacterInstance[] // characters that are part of the beat (can be player characters or NPCs)

    messages Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Message {
    id String @id @default(cuid())

    storyBeatInstanceId String
    storyBeatInstance   StoryBeatInstance @relation(fields: [storyBeatInstanceId], references: [id], onDelete: Cascade)

    characterInstanceId String?
    characterInstance   CharacterInstance? @relation(fields: [characterInstanceId], references: [id], onDelete: Cascade)

    visible Boolean @default(true)

    verb    String? // For Dungeon Master / Players
    content String

    audioUrl         String?
    audioWordTimings String?

    tag String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CharacterInstance {
    id String @id @default(cuid())

    userId String?
    user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull) // no user means it's an NPC or AI character

    // ---- Character Template Info (was this character created from a template?) ---
    characterId String?
    character   Character? @relation(fields: [characterId], references: [id], onDelete: Restrict)

    // ---- Character Instance Info ---
    campaignInstanceId String
    campaignInstance   CampaignInstance @relation(fields: [campaignInstanceId], references: [id], onDelete: Cascade)

    raceId String
    race   Race   @relation(fields: [raceId], references: [id], onDelete: Restrict)

    subraceId String?
    subrace   Subrace? @relation(fields: [subraceId], references: [id], onDelete: Restrict)

    classId String
    class   Class  @relation(fields: [classId], references: [id], onDelete: Restrict)

    backgroundId String
    background   Background @relation(fields: [backgroundId], references: [id], onDelete: Restrict)

    name        String
    description String
    imageUrl    String

    pronouns          String
    age               Int
    voice             String
    alignment         String
    appearance        String
    backstory         String
    personalityTraits String[]
    ideals            String[]
    bonds             String[]
    flaws             String[]

    currentLocationId String?
    currentLocation   Location? @relation(fields: [currentLocationId], references: [id], onDelete: Restrict)

    level            Int           @default(1)
    experience       Int           @default(0)
    proficiencyBonus Int           @default(2)
    proficiencies    Proficiency[]
    feats            Feat[]

    strength     Int @default(8)
    dexterity    Int @default(8)
    constitution Int @default(8)
    intelligence Int @default(8)
    wisdom       Int @default(8)
    charisma     Int @default(8)

    hitDieCount  Int  @default(1)
    hitDieType   Dice @default(D6)
    healthPoints Int  @default(0) // hitDieCount * hitDieType + constitution modifier

    size CharacterSize @default(MEDIUM)

    speed Int @default(25)

    inventory                 Item[]
    spells                    Spell[]
    availableLevel1SpellSlots Int     @default(0) // will be set to maxLevel1SpellSlots when the character is created or long rested
    availableLevel2SpellSlots Int     @default(0)
    availableLevel3SpellSlots Int     @default(0)
    availableLevel4SpellSlots Int     @default(0)
    availableLevel5SpellSlots Int     @default(0)
    availableLevel6SpellSlots Int     @default(0)
    availableLevel7SpellSlots Int     @default(0)
    availableLevel8SpellSlots Int     @default(0)
    availableLevel9SpellSlots Int     @default(0)

    maxLevel1SpellSlots Int @default(0)
    maxLevel2SpellSlots Int @default(0)
    maxLevel3SpellSlots Int @default(0)
    maxLevel4SpellSlots Int @default(0)
    maxLevel5SpellSlots Int @default(0)
    maxLevel6SpellSlots Int @default(0)
    maxLevel7SpellSlots Int @default(0)
    maxLevel8SpellSlots Int @default(0)
    maxLevel9SpellSlots Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Things that the character creates 
    messages Message[]

    // Things that reference this characterInstance
    storyBeatInstances StoryBeatInstance[]
}
